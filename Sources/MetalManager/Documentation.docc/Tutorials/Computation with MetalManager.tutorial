@Tutorial(time: 2) {
    @Intro(title: "Computation with MetalManager") {
        We will make the following code run on the GPU:
        ```swift
        let output = input.map { alpha * $0 + beta }
        ```
        
        @Image(source: Metal_with_background.png, alt: "The Metal icon with background")
    }
    
    @Section(title: "Convert Swift Code to MSL") {
        @ContentAndMedia {
            To use GPU computation, reconstruct the loop with Metal Shading Language (MSL), which looks like c.
            
            @Image(source: Metal_file_icon.png, alt: "The Metal file icon")
        }
        
        @Steps {
            @Step {
                Create a new Metal file.
                
                In a swift package, create a new *empty file*, and change extension to `metal`.
                Then, copy the two lines as it is.
                
                @Code(name: "Metal File", file: Calculation1.metal)
            }
            
            @Step {
                Define the computation function, buffer and dimension of index.
                
                The name is used inside the initializer of the `MetalManager`.
                Use type of `uint2`, `uint3` for higher dimension. Then, x = index.x, y = index.y. 
                Each index is assigned to individual thread.
                Arrays and mutable variables are passed as arguments. Passing constants will be introduced later.
                
                @Code(name: "Metal File", file: Calculation2.metal)
            }
            
            @Step {
                Pass constants.
                
                Please note that the number in the argument is rising.
                
                @Code(name: "Metal File", file: Calculation3.metal)
            }
            
            @Step {
                Define the body of the loop (function).
                
                The for-loop is replaced with a collection of threads, each of which calls this function.
                The function returns nothing. It changes its argument.
                
                @Code(name: "Metal File", file: Calculation4.metal)
            }
        }
    }
    
    @Section(title: "Using the metal file") {
        @ContentAndMedia {
            Now that the file has been defined, it can be used in Swift.
            
            @Image(source: Swift.png, alt: "The Swift bird")
        }
        
        @Steps {
            @Step {
                Define the ``MetalManager/MetalManager``.
                
                The name is the name of the metal function, here it is *linear*.
                
                @Code(name: "main.swift", file: File1.swift)
            }
            
            @Step {
                Pass in the constants.
                
                Please note that the order must be the same as the that in the `.metal` file.
                
                @Code(name: "main.swift", file: File2.swift)
            }
            
            @Step {
                Create buffers. The return value is retained to get the output later.
                
                @Code(name: "main.swift", file: File3.swift)
            }
            
            @Step {
                Runs the metal.
                
                The grid size is the number of iterations in the for-loop.
                
                @Code(name: "main.swift", file: File4.swift)
            }
            
            @Step {
                Get the result as an array.
                
                The buffer is then bind to `[Float]` in O(*1*). The buffer can also be used to create `MLShappedArray` directory, in O(*1*).
                
                @Code(name: "main.swift", file: File5.swift)
            }
        }
    }
        
    @Assessments {
        @MultipleChoice {
            Should we use Metal to perform small computations? 
            
            Like in this case, calculate the doubled value of an array of elements.
            
            @Choice(isCorrect: false) {
                Yes! Metal is the best!
                
                @Justification(reaction: "Not really.") {
                    Although Metal is fast in computation, it would take time to prepare the requirements. For simple tasks, the Swift `Dispatch`, which uses CPUs may be a better choice. In this circumstance, the `vDSP` in the `Accelerate` framework is recommended.
                }
            }
            
            @Choice(isCorrect: true) {
                Well...
                
                @Justification(reaction: "That's right!") {
                    Metal may not always be the best choice, sometimes the Swift `Dispatch` or `vDSP` may be better.
                }
            }
        }
    }
}
